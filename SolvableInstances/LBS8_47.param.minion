MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 23
# CSE_active_eliminated_expressions = 58
# CSE_active_total_size = 152
**VARIABLES**
DISCRETE states_00002_00002 #
{5..9}
DISCRETE states_00002_00003 #
{44..45}
DISCRETE states_00002_00004 #
{5..18}
DISCRETE states_00002_00005 #
{5..44}
DISCRETE states_00002_00006 #
{44..46}
DISCRETE states_00002_00007 #
{7..46}
DISCRETE states_00003_00002 #
{5..44}
DISCRETE states_00003_00003 #
{18..46}
DISCRETE states_00003_00004 #
{5..44}
DISCRETE states_00003_00005 #
{5..46}
DISCRETE states_00003_00006 #
{7..46}
DISCRETE states_00004_00001 #
{11..50}
DISCRETE states_00004_00002 #
{5..46}
DISCRETE states_00004_00003 #
{5..46}
DISCRETE states_00004_00004 #
{5..46}
DISCRETE states_00004_00005 #
{5..46}
DISCRETE states_00005_00001 #
{5..50}
DISCRETE states_00005_00002 #
{5..46}
DISCRETE states_00005_00003 #
{5..46}
DISCRETE states_00005_00004 #
{5..46}
DISCRETE states_00006_00001 #
{5..50}
DISCRETE states_00006_00002 #
{5..46}
DISCRETE states_00006_00003 #
{5..46}
DISCRETE states_00007_00001 #
{5..50}
DISCRETE states_00007_00002 #
{5..46}
DISCRETE actionFrom_00001 #
{5..8}
DISCRETE actionFrom_00002 #
{4..7}
DISCRETE actionFrom_00003 #
{2..6}
DISCRETE actionFrom_00004 #
{2..5}
DISCRETE actionFrom_00005 #
{2..4}
DISCRETE actionFrom_00006 #
{2..3}
DISCRETE actionTo_00001 #
{2..7}
DISCRETE actionTo_00002 #
{2..6}
DISCRETE actionTo_00003 #
{1..5}
DISCRETE actionTo_00004 #
{1..4}
DISCRETE actionTo_00005 #
{1..3}
DISCRETE actionTo_00006 #
{1..2}
DISCRETE actionValue_00001 #
{5..46}
**CONSTRAINTS**
w-inintervalset(actionValue_00001, [5,5,7,7,44,44,46,46])
**VARIABLES**
DISCRETE actionValue_00002 #
{5..46}
DISCRETE actionValue_00003 #
{5..46}
DISCRETE actionValue_00004 #
{5..46}
DISCRETE actionValue_00005 #
{5..46}
DISCRETE actionValue_00006 #
{5..46}
DISCRETE aux14 #Active-CSE: 2 occurrences of this expression or equivalent: Element([9, 45, 18, 5, 44, 46], (actionTo_00001 + -2))
{5..46}
**CONSTRAINTS**
w-inintervalset(aux14, [5,5,9,9,18,18,44,46])
**VARIABLES**
DISCRETE aux16 #Active-CSE: 2 occurrences of this expression or equivalent: Element([50, states_00003_00002, states_00003_00003, states_00003_00004, states_00003_00005], (actionTo_00003 + -1))
{5..50}
**CONSTRAINTS**
w-inintervalset(aux16, [5,46,50,50])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: Element([states_00002_00002, states_00002_00003, states_00002_00004, states_00002_00005, states_00002_00006], (actionTo_00002 + -2))
{5..46}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: Element([states_00004_00001, states_00004_00002, states_00004_00003, states_00004_00004], (actionTo_00004 + -1))
{5..50}
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: Element([states_00005_00001, states_00005_00002, states_00005_00003], (actionTo_00005 + -1))
{5..50}
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: Element([states_00006_00001, states_00006_00002], (actionTo_00006 + -1))
{5..50}
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00005 + actionFrom_00005)
{1..3}
DISCRETE aux27 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00003 + actionFrom_00003)
{1..3}
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00004 + actionFrom_00004)
{1..3}
DISCRETE aux29 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00001 + actionFrom_00001)
{1..3}
DISCRETE aux30 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00002 + actionFrom_00002)
{1..3}
BOOL aux31 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00006 + -1)
DISCRETE aux32 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00003 + -1)
{0..4}
DISCRETE aux33 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00002 + -2)
{0..4}
DISCRETE aux34 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00005 + -1)
{0..2}
DISCRETE aux35 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00004 + -1)
{0..3}
DISCRETE aux36 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00001 + -2)
{0..5}
DISCRETE aux37 #
{0..3}
DISCRETE aux38 #
{0..12}
DISCRETE aux39 #
{0..3}
**CONSTRAINTS**
w-inintervalset(aux39, [0,0,3,3])
**VARIABLES**
DISCRETE aux40 #
{5..7}
**CONSTRAINTS**
w-inintervalset(aux40, [5,5,7,7])
**VARIABLES**
DISCRETE aux41 #
{0..3}
DISCRETE aux42 #
{0..12}
DISCRETE aux43 #
{0..3}
DISCRETE aux44 #
{0..12}
DISCRETE aux45 #
{0..12}
DISCRETE aux46 #
{0..3}
DISCRETE aux47 #
{0..12}
DISCRETE aux48 #
{0..3}
DISCRETE aux49 #
{0..12}
DISCRETE aux50 #
{0..3}
DISCRETE aux51 #(actionFrom_00003 + -2)
{0..4}
DISCRETE aux52 #(actionFrom_00004 + -2)
{0..3}
DISCRETE aux53 #(actionFrom_00001 + -5)
{0..3}
DISCRETE aux54 #(actionFrom_00002 + -4)
{0..3}
DISCRETE aux55 #(actionFrom_00005 + -2)
{0..2}
BOOL aux56 #(actionFrom_00006 + -2)
BOOL aux57 #(actionFrom_00001<8)
BOOL aux58 #(actionFrom_00004<3)
BOOL aux59 #(actionFrom_00005<3)
BOOL aux60 #(actionFrom_00002<7)
BOOL aux61 #(actionFrom_00003<4)
BOOL aux62 #(actionFrom_00006<3)
BOOL aux63 #(actionFrom_00004<4)
BOOL aux64 #(actionFrom_00002<6)
BOOL aux65 #(actionFrom_00003<3)
BOOL aux66 #(actionFrom_00001<6)
BOOL aux67 #(actionFrom_00004<5)
BOOL aux68 #(actionFrom_00002<5)
BOOL aux69 #(actionFrom_00003<6)
BOOL aux70 #(actionFrom_00001<7)
BOOL aux71 #(actionFrom_00005<4)
BOOL aux72 #(actionFrom_00003<5)
**VARIABLES**
ALIAS cards[8]=[50, 9, 45, 18, 5, 44, 46, 7]
**SEARCH**
PRINT[[states_00002_00002],[states_00002_00003],[states_00002_00004],[states_00002_00005],[states_00002_00006],[states_00002_00007],[states_00003_00002],[states_00003_00003],[states_00003_00004],[states_00003_00005],[states_00003_00006],[states_00004_00001],[states_00004_00002],[states_00004_00003],[states_00004_00004],[states_00004_00005],[states_00005_00001],[states_00005_00002],[states_00005_00003],[states_00005_00004],[states_00006_00001],[states_00006_00002],[states_00006_00003],[states_00007_00001],[states_00007_00002],[actionFrom_00001],[actionFrom_00002],[actionFrom_00003],[actionFrom_00004],[actionFrom_00005],[actionFrom_00006],[actionTo_00001],[actionTo_00002],[actionTo_00003],[actionTo_00004],[actionTo_00005],[actionTo_00006],[actionValue_00001],[actionValue_00002],[actionValue_00003],[actionValue_00004],[actionValue_00005],[actionValue_00006]]
VARORDER STATIC [states_00002_00002, states_00002_00003, states_00002_00004, states_00002_00005, states_00002_00006, states_00002_00007, states_00003_00002, states_00003_00003, states_00003_00004, states_00003_00005, states_00003_00006, states_00004_00001, states_00004_00002, states_00004_00003, states_00004_00004, states_00004_00005, states_00005_00001, states_00005_00002, states_00005_00003, states_00005_00004, states_00006_00001, states_00006_00002, states_00006_00003, states_00007_00001, states_00007_00002, actionFrom_00001, actionFrom_00002, actionFrom_00003, actionFrom_00004, actionFrom_00005, actionFrom_00006, actionTo_00001, actionTo_00002, actionTo_00003, actionTo_00004, actionTo_00005, actionTo_00006, actionValue_00001, actionValue_00002, actionValue_00003, actionValue_00004, actionValue_00005, actionValue_00006]
**CONSTRAINTS**
reify(ineq(actionFrom_00001, 8, -1), aux57)
reify(ineq(actionFrom_00004, 3, -1), aux58)
reify(ineq(actionFrom_00005, 3, -1), aux59)
reify(ineq(actionFrom_00002, 7, -1), aux60)
reify(ineq(actionFrom_00003, 4, -1), aux61)
reify(ineq(actionFrom_00006, 3, -1), aux62)
reify(ineq(actionFrom_00004, 4, -1), aux63)
reify(ineq(actionFrom_00002, 6, -1), aux64)
reify(ineq(actionFrom_00003, 3, -1), aux65)
reify(ineq(actionFrom_00001, 6, -1), aux66)
reify(ineq(actionFrom_00004, 5, -1), aux67)
reify(ineq(actionFrom_00002, 5, -1), aux68)
reify(ineq(actionFrom_00003, 6, -1), aux69)
reify(ineq(actionFrom_00001, 7, -1), aux70)
reify(ineq(actionFrom_00005, 4, -1), aux71)
reify(ineq(actionFrom_00003, 5, -1), aux72)
div(states_00007_00002, 13, aux37)
modulo(states_00007_00002,13,aux38)
div(actionValue_00001, 13, aux39)
modulo(actionValue_00001,13,aux40)
div(actionValue_00005, 13, aux41)
modulo(aux23,13,aux42)
div(aux17, 13, aux43)
modulo(aux17,13,aux44)
modulo(aux16,13,aux45)
div(aux16, 13, aux46)
modulo(actionValue_00006,13,aux47)
div(aux25, 13, aux48)
modulo(aux18,13,aux49)
div(actionValue_00004, 13, aux50)
watchelement([9, 45, 18, 5, 44, 46], aux36, aux14)
watchelement([states_00003_00002, states_00003_00003, states_00003_00004, states_00003_00005, states_00003_00006], aux51, actionValue_00003)
watchelement([50, states_00003_00002, states_00003_00003, states_00003_00004, states_00003_00005], aux32, aux16)
watchelement([states_00002_00002, states_00002_00003, states_00002_00004, states_00002_00005, states_00002_00006], aux33, aux17)
watchelement([states_00004_00001, states_00004_00002, states_00004_00003, states_00004_00004], aux35, aux18)
watchelement([states_00004_00002, states_00004_00003, states_00004_00004, states_00004_00005], aux52, actionValue_00004)
watchelement([5, 44, 46, 7], aux53, actionValue_00001)
watchelement([states_00002_00004, states_00002_00005, states_00002_00006, states_00002_00007], aux54, actionValue_00002)
watchelement([states_00005_00002, states_00005_00003, states_00005_00004], aux55, actionValue_00005)
watchelement([states_00005_00001, states_00005_00002, states_00005_00003], aux34, aux23)
watchelement([states_00006_00002, states_00006_00003], aux56, actionValue_00006)
watchelement([states_00006_00001, states_00006_00002], aux31, aux25)
watched-or({gaceq(states_00004_00003,states_00003_00003),ineq(actionFrom_00003, 3, 0),w-literal(actionTo_00003,3)})
diseq(actionTo_00004,actionFrom_00004)
reifyimply(w-literal(states_00002_00007,7), aux57)
watched-or({gaceq(states_00002_00004,states_00003_00004),ineq(actionFrom_00002, 4, 0),w-literal(actionTo_00002,4)})
reifyimply(gaceq(states_00004_00003,states_00005_00002), aux58)
reifyimply(gaceq(states_00005_00003,states_00006_00002), aux59)
reifyimply(gaceq(states_00002_00007,states_00003_00006), aux60)
watched-or({w-literal(states_00002_00007,46),ineq(actionFrom_00001, 7, 0),w-literal(actionTo_00001,7)})
reifyimply(gaceq(states_00004_00003,states_00003_00004), aux61)
diseq(actionTo_00005,actionFrom_00005)
watched-or({gaceq(states_00004_00002,states_00005_00002),ineq(actionFrom_00004, 2, 0),w-literal(actionTo_00004,2)})
watched-or({div(states_00007_00001, 13, aux37),modulo(states_00007_00001,13,aux38)})
reifyimply(gaceq(states_00006_00003,states_00007_00002), aux62)
watched-or({div(aux14, 13, aux39),modulo(aux14,13,aux40)})
watched-or({gaceq(states_00005_00002,states_00006_00002),ineq(actionFrom_00005, 2, 0),w-literal(actionTo_00005,2)})
diseq(actionTo_00006,actionFrom_00006)
watched-or({gaceq(states_00004_00003,states_00005_00003),ineq(actionFrom_00004, 3, 0),w-literal(actionTo_00004,3)})
watchelement([states_00002_00002, states_00002_00003, states_00002_00004, states_00002_00005, states_00002_00006, states_00002_00007], aux36, actionValue_00001)
watched-or({div(aux23, 13, aux41),modulo(actionValue_00005,13,aux42)})
reifyimply(gaceq(states_00004_00004,states_00005_00003), aux63)
watched-or({gaceq(states_00004_00004,states_00003_00004),ineq(actionFrom_00003, 4, 0),w-literal(actionTo_00003,4)})
reifyimply(gaceq(states_00002_00006,states_00003_00005), aux64)
watchelement([states_00007_00001, states_00007_00002], aux31, actionValue_00006)
reifyimply(gaceq(states_00004_00002,states_00003_00003), aux65)
watched-or({div(actionValue_00002, 13, aux43),modulo(actionValue_00002,13,aux44)})
watched-or({gaceq(states_00002_00005,states_00003_00005),ineq(actionFrom_00002, 5, 0),w-literal(actionTo_00002,5)})
reifyimply(w-literal(states_00002_00005,44), aux66)
watched-or({modulo(actionValue_00003,13,aux45),div(actionValue_00003, 13, aux46)})
watched-or({modulo(aux25,13,aux47),div(actionValue_00006, 13, aux48)})
watched-or({w-literal(states_00002_00006,44),ineq(actionFrom_00001, 6, 0),w-literal(actionTo_00001,6)})
watched-or({w-literal(states_00002_00004,18),w-literal(actionTo_00001,4)})
watched-or({w-literal(states_00002_00003,45),w-literal(actionTo_00001,3)})
reifyimply(gaceq(states_00004_00005,states_00005_00004), aux67)
reifyimply(gaceq(states_00002_00005,states_00003_00004), aux68)
watched-or({gaceq(states_00004_00002,states_00003_00002),ineq(actionFrom_00003, 2, 0),w-literal(actionTo_00003,2)})
reifyimply(gaceq(states_00004_00005,states_00003_00006), aux69)
diseq(actionTo_00001,actionFrom_00001)
watched-or({modulo(actionValue_00004,13,aux49),div(aux18, 13, aux50)})
watched-or({gaceq(states_00004_00005,states_00003_00005),ineq(actionFrom_00003, 5, 0),w-literal(actionTo_00003,5)})
watchelement([states_00006_00001, states_00006_00002, states_00006_00003], aux34, actionValue_00005)
watched-or({gaceq(states_00006_00001,states_00007_00001),w-literal(actionTo_00006,1)})
watched-or({w-literal(aux29,1),w-literal(aux29,3)})
watched-or({w-literal(aux30,1),w-literal(aux30,3)})
watched-or({w-literal(aux27,1),w-literal(aux27,3)})
watched-or({w-literal(aux28,1),w-literal(aux28,3)})
watched-or({w-literal(aux26,1),w-literal(aux26,3)})
watchelement([states_00004_00001, states_00004_00002, states_00004_00003, states_00004_00004, states_00004_00005], aux32, actionValue_00003)
diseq(actionTo_00002,actionFrom_00002)
watched-or({gaceq(states_00002_00006,states_00003_00006),ineq(actionFrom_00002, 6, 0),w-literal(actionTo_00002,6)})
reifyimply(w-literal(states_00002_00006,46), aux70)
watched-or({ineq(actionFrom_00006, 2, 0),gaceq(states_00006_00002,states_00007_00002),w-literal(actionTo_00006,2)})
reifyimply(gaceq(states_00005_00004,states_00006_00003), aux71)
watched-or({w-literal(states_00002_00002,9),w-literal(actionTo_00001,2)})
watchelement([states_00003_00002, states_00003_00003, states_00003_00004, states_00003_00005, states_00003_00006], aux33, actionValue_00002)
watchelement([states_00005_00001, states_00005_00002, states_00005_00003, states_00005_00004], aux35, actionValue_00004)
watched-or({w-literal(states_00002_00005,5),ineq(actionFrom_00001, 5, 0),w-literal(actionTo_00001,5)})
watched-or({gaceq(states_00002_00003,states_00003_00003),w-literal(actionTo_00002,3)})
watched-or({gaceq(states_00005_00003,states_00006_00003),ineq(actionFrom_00005, 3, 0),w-literal(actionTo_00005,3)})
watched-or({gaceq(states_00002_00002,states_00003_00002),w-literal(actionTo_00002,2)})
reifyimply(gaceq(states_00004_00004,states_00003_00005), aux72)
watched-or({w-literal(states_00004_00001,50),w-literal(actionTo_00003,1)})
watched-or({gaceq(states_00004_00001,states_00005_00001),w-literal(actionTo_00004,1)})
watched-or({gaceq(states_00005_00001,states_00006_00001),w-literal(actionTo_00005,1)})
diseq(actionTo_00003,actionFrom_00003)
watched-or({gaceq(states_00004_00004,states_00005_00004),ineq(actionFrom_00004, 4, 0),w-literal(actionTo_00004,4)})
sumleq([actionFrom_00003,-2],aux51)
sumgeq([actionFrom_00003,-2],aux51)
sumleq([actionFrom_00004,-2],aux52)
sumgeq([actionFrom_00004,-2],aux52)
sumleq([actionFrom_00001,-5],aux53)
sumgeq([actionFrom_00001,-5],aux53)
sumleq([actionFrom_00002,-4],aux54)
sumgeq([actionFrom_00002,-4],aux54)
sumleq([actionFrom_00005,-2],aux55)
sumgeq([actionFrom_00005,-2],aux55)
sumleq([actionFrom_00006,-2],aux56)
sumgeq([actionFrom_00006,-2],aux56)
weightedsumleq([-1,1],[actionTo_00005,actionFrom_00005],aux26)
weightedsumgeq([-1,1],[actionTo_00005,actionFrom_00005],aux26)
weightedsumleq([-1,1],[actionTo_00003,actionFrom_00003],aux27)
weightedsumgeq([-1,1],[actionTo_00003,actionFrom_00003],aux27)
weightedsumleq([-1,1],[actionTo_00004,actionFrom_00004],aux28)
weightedsumgeq([-1,1],[actionTo_00004,actionFrom_00004],aux28)
weightedsumleq([-1,1],[actionTo_00001,actionFrom_00001],aux29)
weightedsumgeq([-1,1],[actionTo_00001,actionFrom_00001],aux29)
weightedsumleq([-1,1],[actionTo_00002,actionFrom_00002],aux30)
weightedsumgeq([-1,1],[actionTo_00002,actionFrom_00002],aux30)
sumleq([actionTo_00006,-1],aux31)
sumgeq([actionTo_00006,-1],aux31)
sumleq([actionTo_00003,-1],aux32)
sumgeq([actionTo_00003,-1],aux32)
sumleq([actionTo_00002,-2],aux33)
sumgeq([actionTo_00002,-2],aux33)
sumleq([actionTo_00005,-1],aux34)
sumgeq([actionTo_00005,-1],aux34)
sumleq([actionTo_00004,-1],aux35)
sumgeq([actionTo_00004,-1],aux35)
sumleq([actionTo_00001,-2],aux36)
sumgeq([actionTo_00001,-2],aux36)
weightedsumleq([-1,1],[actionTo_00006,actionFrom_00006],1)
weightedsumgeq([-1,1],[actionTo_00006,actionFrom_00006],1)
**EOF**
