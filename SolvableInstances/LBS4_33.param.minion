MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 7
# CSE_active_eliminated_expressions = 18
# CSE_active_total_size = 43
**VARIABLES**
DISCRETE states_00002_00001 #
{0..7}
DISCRETE states_00002_00002 #
{5..7}
DISCRETE states_00002_00003 #
{0..5}
DISCRETE states_00003_00001 #
{0..7}
DISCRETE actionFrom_00001 #
{2..4}
DISCRETE actionFrom_00002 #
{2..3}
DISCRETE actionTo_00001 #
{1..3}
DISCRETE actionTo_00002 #
{1..2}
DISCRETE actionValue_00001 #
{0..7}
**CONSTRAINTS**
w-inintervalset(actionValue_00001, [0,0,5,5,7,7])
**VARIABLES**
DISCRETE actionValue_00002 #
{0..7}
DISCRETE actionValue_00003 #
{0..5}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: Element([3, 7, 5], (actionTo_00001 + -1))
{3..7}
**CONSTRAINTS**
w-inintervalset(aux15, [3,3,5,5,7,7])
**VARIABLES**
DISCRETE aux17 #Active-CSE: 2 occurrences of this expression or equivalent: Element([states_00002_00001, states_00002_00002], (actionTo_00002 + -1))
{0..7}
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00001 + actionFrom_00001)
{1..3}
BOOL aux19 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00002 + -1)
DISCRETE aux20 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00001 + -1)
{0..2}
DISCRETE aux22 #
{0..7}
**CONSTRAINTS**
w-inintervalset(aux22, [0,0,5,5,7,7])
**VARIABLES**
DISCRETE aux24 #
{0..7}
DISCRETE aux26 #
{0..5}
DISCRETE aux27 #(actionFrom_00001 + -2)
{0..2}
BOOL aux28 #(actionFrom_00002 + -2)
BOOL aux29 #(actionFrom_00001<4)
BOOL aux30 #(actionFrom_00001<3)
BOOL aux31 #(actionFrom_00002<3)
**VARIABLES**
ALIAS cards[4]=[3, 7, 5, 0]
**SEARCH**
PRINT[[states_00002_00001],[states_00002_00002],[states_00002_00003],[states_00003_00001],[actionFrom_00001],[actionFrom_00002],[actionTo_00001],[actionTo_00002],[actionValue_00001],[actionValue_00002],[actionValue_00003]]
VARORDER STATIC [states_00002_00001, states_00002_00002, states_00002_00003, states_00003_00001, actionValue_00003, actionFrom_00001, actionFrom_00002, actionTo_00001, actionTo_00002, actionValue_00001, actionValue_00002]
**CONSTRAINTS**
reify(ineq(actionFrom_00001, 4, -1), aux29)
reify(ineq(actionFrom_00001, 3, -1), aux30)
reify(ineq(actionFrom_00002, 3, -1), aux31)
div(aux15, 13, 0)
modulo(actionValue_00001,13,aux22)
div(aux17, 13, 0)
modulo(actionValue_00002,13,aux24)
div(actionValue_00003, 13, 0)
modulo(actionValue_00003,13,aux26)
watchelement([7, 5, 0], aux27, actionValue_00001)
watchelement([3, 7, 5], aux20, aux15)
watchelement([states_00002_00002, states_00002_00003], aux28, actionValue_00002)
watchelement([states_00002_00001, states_00002_00002], aux19, aux17)
reifyimply(w-literal(states_00002_00003,0), aux29)
reifyimply(w-literal(states_00002_00002,5), aux30)
watched-or({div(actionValue_00001, 13, 0),modulo(aux15,13,aux22)})
watched-or({w-literal(aux18,1),w-literal(aux18,3)})
watched-or({div(actionValue_00002, 13, 0),modulo(aux17,13,aux24)})
watchelement([states_00002_00001, states_00002_00002, states_00002_00003], aux20, actionValue_00001)
watched-or({w-literal(states_00002_00002,7),ineq(actionFrom_00001, 2, 0),w-literal(actionTo_00001,2)})
diseq(actionTo_00002,actionFrom_00002)
watched-or({gaceq(actionValue_00003,states_00002_00002),ineq(actionFrom_00002, 2, 0),w-literal(actionTo_00002,2)})
watched-or({w-literal(states_00002_00001,3),w-literal(actionTo_00001,1)})
reifyimply(gaceq(actionValue_00003,states_00002_00003), aux31)
watched-or({div(states_00003_00001, 13, 0),modulo(states_00003_00001,13,aux26)})
watched-or({w-literal(states_00002_00003,5),ineq(actionFrom_00001, 3, 0),w-literal(actionTo_00001,3)})
watched-or({gaceq(states_00002_00001,states_00003_00001),w-literal(actionTo_00002,1)})
diseq(actionTo_00001,actionFrom_00001)
watchelement([states_00003_00001, actionValue_00003], aux19, actionValue_00002)
sumleq([actionFrom_00001,-2],aux27)
sumgeq([actionFrom_00001,-2],aux27)
sumleq([actionFrom_00002,-2],aux28)
sumgeq([actionFrom_00002,-2],aux28)
weightedsumleq([-1,1],[actionTo_00001,actionFrom_00001],aux18)
weightedsumgeq([-1,1],[actionTo_00001,actionFrom_00001],aux18)
sumleq([actionTo_00002,-1],aux19)
sumgeq([actionTo_00002,-1],aux19)
sumleq([actionTo_00001,-1],aux20)
sumgeq([actionTo_00001,-1],aux20)
weightedsumleq([-1,1],[actionTo_00002,actionFrom_00002],1)
weightedsumgeq([-1,1],[actionTo_00002,actionFrom_00002],1)
**EOF**
