MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 15
# CSE_active_eliminated_expressions = 38
# CSE_active_total_size = 92
**VARIABLES**
DISCRETE states_00002_00002 #
{8..21}
DISCRETE states_00002_00003 #
{5..18}
DISCRETE states_00002_00004 #
{18..20}
DISCRETE states_00002_00005 #
{5..20}
DISCRETE states_00003_00002 #
{5..21}
DISCRETE states_00003_00003 #
{5..20}
DISCRETE states_00003_00004 #
{5..20}
DISCRETE states_00004_00001 #
{12..38}
DISCRETE states_00004_00002 #
{5..21}
DISCRETE states_00004_00003 #
{5..20}
DISCRETE states_00005_00001 #
{5..38}
DISCRETE actionFrom_00001 #
{3..6}
DISCRETE actionFrom_00002 #
{3..5}
DISCRETE actionFrom_00003 #
{2..4}
DISCRETE actionFrom_00004 #
{2..3}
DISCRETE actionTo_00001 #
{2..4}
DISCRETE actionTo_00002 #
{2..4}
DISCRETE actionTo_00003 #
{1..3}
DISCRETE actionTo_00004 #
{1..2}
DISCRETE actionValue_00001 #
{5..20}
**CONSTRAINTS**
w-inintervalset(actionValue_00001, [5,5,8,8,18,18,20,20])
**VARIABLES**
DISCRETE actionValue_00002 #
{5..20}
DISCRETE actionValue_00003 #
{5..20}
DISCRETE actionValue_00004 #
{5..21}
DISCRETE actionValue_00005 #
{5..20}
DISCRETE aux15 #Active-CSE: 2 occurrences of this expression or equivalent: Element([38, states_00003_00002, states_00003_00003], (actionTo_00003 + -1))
{5..38}
**CONSTRAINTS**
w-inintervalset(aux15, [5,21,38,38])
**VARIABLES**
DISCRETE aux18 #Active-CSE: 2 occurrences of this expression or equivalent: Element([21, 8, 18], (actionTo_00001 + -2))
{8..21}
**CONSTRAINTS**
w-inintervalset(aux18, [8,8,18,18,21,21])
**VARIABLES**
DISCRETE aux19 #Active-CSE: 2 occurrences of this expression or equivalent: Element([states_00002_00002, states_00002_00003, states_00002_00004], (actionTo_00002 + -2))
{5..21}
DISCRETE aux21 #Active-CSE: 2 occurrences of this expression or equivalent: Element([states_00004_00001, states_00004_00002], (actionTo_00004 + -1))
{5..38}
DISCRETE aux22 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00003 + actionFrom_00003)
{1..3}
DISCRETE aux23 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00001 + actionFrom_00001)
{1..3}
DISCRETE aux24 #Active-CSE: 2 occurrences of this expression or equivalent: ( - actionTo_00002 + actionFrom_00002)
{1..3}
DISCRETE aux25 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00003 + -1)
{0..2}
DISCRETE aux26 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00002 + -2)
{0..2}
BOOL aux27 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00004 + -1)
DISCRETE aux28 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00001 + -2)
{0..2}
BOOL aux29 #
DISCRETE aux30 #
{0..12}
DISCRETE aux31 #
{5..8}
**CONSTRAINTS**
w-inintervalset(aux31, [5,5,8,8])
**VARIABLES**
BOOL aux32 #
BOOL aux33 #
DISCRETE aux34 #
{0..12}
BOOL aux35 #
DISCRETE aux36 #
{0..12}
BOOL aux37 #
DISCRETE aux38 #
{0..12}
DISCRETE aux39 #(actionFrom_00001 + -3)
{0..3}
DISCRETE aux40 #(actionFrom_00003 + -2)
{0..2}
DISCRETE aux41 #(actionFrom_00002 + -3)
{0..2}
BOOL aux42 #(actionFrom_00004 + -2)
BOOL aux43 #(actionFrom_00001<6)
BOOL aux44 #(actionFrom_00001<4)
BOOL aux45 #(actionFrom_00004<3)
BOOL aux46 #(actionFrom_00002<5)
BOOL aux47 #(actionFrom_00003<4)
BOOL aux48 #(actionFrom_00001<5)
BOOL aux49 #(actionFrom_00002<4)
BOOL aux50 #(actionFrom_00003<3)
**VARIABLES**
ALIAS cards[6]=[38, 21, 8, 18, 20, 5]
**SEARCH**
PRINT[[states_00002_00002],[states_00002_00003],[states_00002_00004],[states_00002_00005],[states_00003_00002],[states_00003_00003],[states_00003_00004],[states_00004_00001],[states_00004_00002],[states_00004_00003],[states_00005_00001],[actionFrom_00001],[actionFrom_00002],[actionFrom_00003],[actionFrom_00004],[actionTo_00001],[actionTo_00002],[actionTo_00003],[actionTo_00004],[actionValue_00001],[actionValue_00002],[actionValue_00003],[actionValue_00004],[actionValue_00005]]
VARORDER STATIC [states_00002_00002, states_00002_00003, states_00002_00004, states_00002_00005, states_00003_00002, states_00003_00003, states_00003_00004, states_00004_00001, states_00004_00002, states_00004_00003, states_00005_00001, actionValue_00005, actionFrom_00001, actionFrom_00002, actionFrom_00003, actionFrom_00004, actionTo_00001, actionTo_00002, actionTo_00003, actionTo_00004, actionValue_00001, actionValue_00002, actionValue_00003, actionValue_00004]
**CONSTRAINTS**
reify(ineq(actionFrom_00001, 6, -1), aux43)
reify(ineq(actionFrom_00001, 4, -1), aux44)
reify(ineq(actionFrom_00004, 3, -1), aux45)
reify(ineq(actionFrom_00002, 5, -1), aux46)
reify(ineq(actionFrom_00003, 4, -1), aux47)
reify(ineq(actionFrom_00001, 5, -1), aux48)
reify(ineq(actionFrom_00002, 4, -1), aux49)
reify(ineq(actionFrom_00003, 3, -1), aux50)
div(actionValue_00003, 13, aux29)
modulo(actionValue_00003,13,aux30)
modulo(aux18,13,aux31)
div(aux18, 13, aux32)
div(actionValue_00004, 13, aux33)
modulo(actionValue_00004,13,aux34)
div(actionValue_00005, 13, aux35)
modulo(states_00005_00001,13,aux36)
div(actionValue_00002, 13, aux37)
modulo(actionValue_00002,13,aux38)
watchelement([8, 18, 20, 5], aux39, actionValue_00001)
watchelement([38, states_00003_00002, states_00003_00003], aux25, aux15)
watchelement([states_00003_00002, states_00003_00003, states_00003_00004], aux40, actionValue_00003)
watchelement([states_00002_00003, states_00002_00004, states_00002_00005], aux41, actionValue_00002)
watchelement([21, 8, 18], aux28, aux18)
watchelement([states_00002_00002, states_00002_00003, states_00002_00004], aux26, aux19)
watchelement([states_00004_00002, states_00004_00003], aux42, actionValue_00004)
watchelement([states_00004_00001, states_00004_00002], aux27, aux21)
reifyimply(w-literal(states_00002_00005,5), aux43)
reifyimply(w-literal(states_00002_00003,18), aux44)
watched-or({gaceq(states_00004_00003,states_00003_00003),ineq(actionFrom_00003, 3, 0),w-literal(actionTo_00003,3)})
watchelement([states_00004_00001, states_00004_00002, states_00004_00003], aux25, actionValue_00003)
watched-or({div(aux15, 13, aux29),modulo(aux15,13,aux30)})
watchelement([states_00005_00001, actionValue_00005], aux27, actionValue_00004)
diseq(actionTo_00004,actionFrom_00004)
watched-or({modulo(actionValue_00001,13,aux31),div(actionValue_00001, 13, aux32)})
watched-or({gaceq(states_00002_00004,states_00003_00004),ineq(actionFrom_00002, 4, 0),w-literal(actionTo_00002,4)})
watchelement([states_00002_00002, states_00002_00003, states_00002_00004], aux28, actionValue_00001)
reifyimply(gaceq(states_00004_00003,actionValue_00005), aux45)
watched-or({div(aux21, 13, aux33),modulo(aux21,13,aux34)})
watched-or({w-literal(states_00002_00003,8),ineq(actionFrom_00001, 3, 0),w-literal(actionTo_00001,3)})
reifyimply(gaceq(states_00002_00005,states_00003_00004), aux46)
watched-or({gaceq(states_00004_00002,states_00003_00002),ineq(actionFrom_00003, 2, 0),w-literal(actionTo_00003,2)})
reifyimply(gaceq(states_00004_00003,states_00003_00004), aux47)
diseq(actionTo_00001,actionFrom_00001)
watched-or({w-literal(states_00002_00005,20),ineq(actionFrom_00001, 5, 0)})
watched-or({gaceq(states_00002_00003,states_00003_00003),ineq(actionFrom_00002, 3, 0),w-literal(actionTo_00002,3)})
watched-or({ineq(actionFrom_00004, 2, 0),gaceq(states_00004_00002,actionValue_00005),w-literal(actionTo_00004,2)})
reifyimply(w-literal(states_00002_00004,20), aux48)
watched-or({w-literal(states_00002_00004,18),ineq(actionFrom_00001, 4, 0),w-literal(actionTo_00001,4)})
watched-or({w-literal(aux23,1),w-literal(aux23,3)})
watched-or({w-literal(aux24,1),w-literal(aux24,3)})
watched-or({w-literal(aux22,1),w-literal(aux22,3)})
watched-or({div(states_00005_00001, 13, aux35),modulo(actionValue_00005,13,aux36)})
watchelement([states_00003_00002, states_00003_00003, states_00003_00004], aux26, actionValue_00002)
diseq(actionTo_00002,actionFrom_00002)
watched-or({w-literal(states_00002_00002,21),w-literal(actionTo_00001,2)})
watched-or({gaceq(states_00002_00002,states_00003_00002),w-literal(actionTo_00002,2)})
reifyimply(gaceq(states_00002_00004,states_00003_00003), aux49)
watched-or({div(aux19, 13, aux37),modulo(aux19,13,aux38)})
watched-or({w-literal(states_00004_00001,38),w-literal(actionTo_00003,1)})
watched-or({gaceq(states_00004_00001,states_00005_00001),w-literal(actionTo_00004,1)})
reifyimply(gaceq(states_00004_00002,states_00003_00003), aux50)
diseq(actionTo_00003,actionFrom_00003)
sumleq([actionFrom_00001,-3],aux39)
sumgeq([actionFrom_00001,-3],aux39)
sumleq([actionFrom_00003,-2],aux40)
sumgeq([actionFrom_00003,-2],aux40)
sumleq([actionFrom_00002,-3],aux41)
sumgeq([actionFrom_00002,-3],aux41)
sumleq([actionFrom_00004,-2],aux42)
sumgeq([actionFrom_00004,-2],aux42)
weightedsumleq([-1,1],[actionTo_00003,actionFrom_00003],aux22)
weightedsumgeq([-1,1],[actionTo_00003,actionFrom_00003],aux22)
weightedsumleq([-1,1],[actionTo_00001,actionFrom_00001],aux23)
weightedsumgeq([-1,1],[actionTo_00001,actionFrom_00001],aux23)
weightedsumleq([-1,1],[actionTo_00002,actionFrom_00002],aux24)
weightedsumgeq([-1,1],[actionTo_00002,actionFrom_00002],aux24)
sumleq([actionTo_00003,-1],aux25)
sumgeq([actionTo_00003,-1],aux25)
sumleq([actionTo_00002,-2],aux26)
sumgeq([actionTo_00002,-2],aux26)
sumleq([actionTo_00004,-1],aux27)
sumgeq([actionTo_00004,-1],aux27)
sumleq([actionTo_00001,-2],aux28)
sumgeq([actionTo_00001,-2],aux28)
weightedsumleq([-1,1],[actionTo_00004,actionFrom_00004],1)
weightedsumgeq([-1,1],[actionTo_00004,actionFrom_00004],1)
**EOF**
